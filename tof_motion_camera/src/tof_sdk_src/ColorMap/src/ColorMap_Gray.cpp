///////////////////////////////////////////////////////////////////////////
//     PROJECT: Cpp -- Gray
//   COPYRIGHT: R. Hranitzky
//    $RCSfile$
//   $Revision: 4479 $
//      AUTHOR: R. Hranitzky
//    LANGUAGE: C++ 
// DESCRIPTION: The implementation for class Gray 
//              used /usr/local/bin/CppClassCoder.pl to create this file
//              created Sun Nov 25 22:11:15 2018
//              automatically generated code
///////////////////////////////////////////////////////////////////////////

#ifdef USE_IDENT
#ident "$Header: $" 
#endif

//------------------------------ Includes ------------------------------
#include "stdafx.h"
#include "ColorMap_Gray.h"
#include "Common_LogFormat.h"

//------------------------------ Using Namespaces ----------------------
using namespace std;
using namespace ColorMap;


//colormap, created with octave
//g=gray;
//for i=1:64
//printf("{%f,%f,%f},\n",g(i,1),g(i,2),g(i,3))
//endfor

static const float colormap [][3] = {
                                        {0.000000,0.000000,0.000000},
					{0.015873,0.015873,0.015873},
					{0.031746,0.031746,0.031746},
					{0.047619,0.047619,0.047619},
					{0.063492,0.063492,0.063492},
					{0.079365,0.079365,0.079365},
					{0.095238,0.095238,0.095238},
					{0.111111,0.111111,0.111111},
					{0.126984,0.126984,0.126984},
					{0.142857,0.142857,0.142857},
					{0.158730,0.158730,0.158730},
					{0.174603,0.174603,0.174603},
					{0.190476,0.190476,0.190476},
					{0.206349,0.206349,0.206349},
					{0.222222,0.222222,0.222222},
					{0.238095,0.238095,0.238095},
					{0.253968,0.253968,0.253968},
					{0.269841,0.269841,0.269841},
					{0.285714,0.285714,0.285714},
					{0.301587,0.301587,0.301587},
					{0.317460,0.317460,0.317460},
					{0.333333,0.333333,0.333333},
					{0.349206,0.349206,0.349206},
					{0.365079,0.365079,0.365079},
					{0.380952,0.380952,0.380952},
					{0.396825,0.396825,0.396825},
					{0.412698,0.412698,0.412698},
					{0.428571,0.428571,0.428571},
					{0.444444,0.444444,0.444444},
					{0.460317,0.460317,0.460317},
					{0.476190,0.476190,0.476190},
					{0.492063,0.492063,0.492063},
					{0.507937,0.507937,0.507937},
					{0.523810,0.523810,0.523810},
					{0.539683,0.539683,0.539683},
					{0.555556,0.555556,0.555556},
					{0.571429,0.571429,0.571429},
					{0.587302,0.587302,0.587302},
					{0.603175,0.603175,0.603175},
					{0.619048,0.619048,0.619048},
					{0.634921,0.634921,0.634921},
					{0.650794,0.650794,0.650794},
					{0.666667,0.666667,0.666667},
					{0.682540,0.682540,0.682540},
					{0.698413,0.698413,0.698413},
					{0.714286,0.714286,0.714286},
					{0.730159,0.730159,0.730159},
					{0.746032,0.746032,0.746032},
					{0.761905,0.761905,0.761905},
					{0.777778,0.777778,0.777778},
					{0.793651,0.793651,0.793651},
					{0.809524,0.809524,0.809524},
					{0.825397,0.825397,0.825397},
					{0.841270,0.841270,0.841270},
					{0.857143,0.857143,0.857143},
					{0.873016,0.873016,0.873016},
					{0.888889,0.888889,0.888889},
					{0.904762,0.904762,0.904762},
					{0.920635,0.920635,0.920635},
					{0.936508,0.936508,0.936508},
					{0.952381,0.952381,0.952381},
					{0.968254,0.968254,0.968254},
					{0.984127,0.984127,0.984127},
					{1.000000,1.000000,1.000000} 
                                    };


//------------------------------ Constructor -------------------

Gray::Gray ( ) 
: Mat2D::VirtualMat<float>()

{
  /// nothing
}

Gray::Gray ( const uint2 & N ) 
: Mat2D::VirtualMat<float>(3,N)

{

  assert(N>1 && "Gray: N must be >1");  

  for (uint2 y = 0; y < N; ++y)
  {

            uint2 tmpValue = y;
            //color table interpolation and lookup
            uint4 rgb = 63.0 * tmpValue / (N-1);
            float res   = 63.0 * tmpValue / (N-1) - rgb;
            rgb = rgb % 64;
            uint4 rgb1 = rgb +1;
            if (rgb1>63) rgb1 = 63;

            float kr = res * (colormap[rgb1][0] - colormap[rgb][0]) + colormap[rgb][0];  //interpolation of red value
            float kg = res * (colormap[rgb1][1] - colormap[rgb][1]) + colormap[rgb][1];  //interpolation of green value
            float kb = res * (colormap[rgb1][2] - colormap[rgb][2]) + colormap[rgb][2];  //interpolation of blue value

            itsIdx(0,y) = kr;
            itsIdx(1,y) = kg;
            itsIdx(2,y) = kb;
    } //for

}




//------------------------------ Destructor ----------------------------

Gray::~Gray (  ) 
{
  /// nothing
}


//------------------------------ Pickling ------------------------------

//------------------------------ Logging ------------------------------
void Gray::Log( ostream & aStreamRef ) const
{
   Common::LogFormat tmpLogFormat( 10 );
   Log( aStreamRef, tmpLogFormat );
}

void Gray::Log( ostream & aStreamRef, Common::LogFormat & aLogFormat ) const
{
   aLogFormat . LogBeginStruct( aStreamRef, "ColorMap_Gray" );
    itsIdx.LogMat(aStreamRef, aLogFormat);
   aLogFormat . LogEndStruct( aStreamRef );
}

//End of File
