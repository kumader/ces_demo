///////////////////////////////////////////////////////////////////////////
//     PROJECT: Cpp -- Jet
//   COPYRIGHT: R. Hranitzky
//    $RCSfile$
//   $Revision: 4479 $
//      AUTHOR: R. Hranitzky
//    LANGUAGE: C++ 
// DESCRIPTION: The implementation for class Jet 
//              used /usr/local/bin/CppClassCoder.pl to create this file
//              created Mon Nov 26 00:38:49 2018
//              automatically generated code
///////////////////////////////////////////////////////////////////////////

#ifdef USE_IDENT
#ident "$Header: $" 
#endif

//------------------------------ Includes ------------------------------
#include "stdafx.h"
#include "ColorMap_Jet.h"
#include "Common_LogFormat.h"

//------------------------------ Using Namespaces ----------------------
using namespace std;
using namespace ColorMap;


//colormap, created with octave
//j=jet;
//for i=1:64
//printf("{%f,%f,%f},\n",j(i,1),j(i,2),j(i,3))
//endfor

static const float colormap [][3] = {
					{0.000000,0.000000,0.562500},
					{0.000000,0.000000,0.625000},
					{0.000000,0.000000,0.687500},
					{0.000000,0.000000,0.750000},
					{0.000000,0.000000,0.812500},
					{0.000000,0.000000,0.875000},
					{0.000000,0.000000,0.937500},
					{0.000000,0.000000,1.000000},
					{0.000000,0.062500,1.000000},
					{0.000000,0.125000,1.000000},
					{0.000000,0.187500,1.000000},
					{0.000000,0.250000,1.000000},
					{0.000000,0.312500,1.000000},
					{0.000000,0.375000,1.000000},
					{0.000000,0.437500,1.000000},
					{0.000000,0.500000,1.000000},
					{0.000000,0.562500,1.000000},
					{0.000000,0.625000,1.000000},
					{0.000000,0.687500,1.000000},
					{0.000000,0.750000,1.000000},
					{0.000000,0.812500,1.000000},
					{0.000000,0.875000,1.000000},
					{0.000000,0.937500,1.000000},
					{0.000000,1.000000,1.000000},
					{0.062500,1.000000,0.937500},
					{0.125000,1.000000,0.875000},
					{0.187500,1.000000,0.812500},
					{0.250000,1.000000,0.750000},
					{0.312500,1.000000,0.687500},
					{0.375000,1.000000,0.625000},
					{0.437500,1.000000,0.562500},
					{0.500000,1.000000,0.500000},
					{0.562500,1.000000,0.437500},
					{0.625000,1.000000,0.375000},
					{0.687500,1.000000,0.312500},
					{0.750000,1.000000,0.250000},
					{0.812500,1.000000,0.187500},
					{0.875000,1.000000,0.125000},
					{0.937500,1.000000,0.062500},
					{1.000000,1.000000,0.000000},
					{1.000000,0.937500,0.000000},
					{1.000000,0.875000,0.000000},
					{1.000000,0.812500,0.000000},
					{1.000000,0.750000,0.000000},
					{1.000000,0.687500,0.000000},
					{1.000000,0.625000,0.000000},
					{1.000000,0.562500,0.000000},
					{1.000000,0.500000,0.000000},
					{1.000000,0.437500,0.000000},
					{1.000000,0.375000,0.000000},
					{1.000000,0.312500,0.000000},
					{1.000000,0.250000,0.000000},
					{1.000000,0.187500,0.000000},
					{1.000000,0.125000,0.000000},
					{1.000000,0.062500,0.000000},
					{1.000000,0.000000,0.000000},
					{0.937500,0.000000,0.000000},
					{0.875000,0.000000,0.000000},
					{0.812500,0.000000,0.000000},
					{0.750000,0.000000,0.000000},
					{0.687500,0.000000,0.000000},
					{0.625000,0.000000,0.000000},
					{0.562500,0.000000,0.000000},
					{0.500000,0.000000,0.000000}
				    };


//------------------------------ Constructor -------------------

Jet::Jet ( ) 
: Mat2D::VirtualMat<float>()

{
  /// nothing
}

Jet::Jet ( const uint2 & N ) 
: Mat2D::VirtualMat<float>(3,N)

{

  assert(N>1 && "Jet: N must be >1");  

  for (uint2 y = 0; y < N; ++y)
  {

            uint2 tmpValue = y;
            //color table interpolation and lookup
            uint4 rgb = 63.0 * tmpValue / (N-1);
            float res   = 63.0 * tmpValue / (N-1) - rgb;
            rgb = rgb % 64;
            uint4 rgb1 = rgb +1;
            if (rgb1>63) rgb1 = 63;

            float kr = res * (colormap[rgb1][0] - colormap[rgb][0]) + colormap[rgb][0];  //interpolation of red value
            float kg = res * (colormap[rgb1][1] - colormap[rgb][1]) + colormap[rgb][1];  //interpolation of green value
            float kb = res * (colormap[rgb1][2] - colormap[rgb][2]) + colormap[rgb][2];  //interpolation of blue value

            itsIdx(0,y) = kr;
            itsIdx(1,y) = kg;
            itsIdx(2,y) = kb;
    } //for

}




//------------------------------ Destructor ----------------------------

Jet::~Jet (  ) 
{
  /// nothing
}


//------------------------------ Pickling ------------------------------

//------------------------------ Logging ------------------------------
void Jet::Log( ostream & aStreamRef ) const
{
   Common::LogFormat tmpLogFormat( 10 );
   Log( aStreamRef, tmpLogFormat );
}

void Jet::Log( ostream & aStreamRef, Common::LogFormat & aLogFormat ) const
{
   aLogFormat . LogBeginStruct( aStreamRef, "ColorMap_Jet" );
    itsIdx.LogMat(aStreamRef, aLogFormat);
   aLogFormat . LogEndStruct( aStreamRef );
}

//End of File
